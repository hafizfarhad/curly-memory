from Crypto.Util.number import *
from math import prod

# Public values from out.txt
e = 65537
ct = 1146925802412396306429045208840438006492893092461567543783032072915874322352460640553754422361333106164716321005704861605877243543074149419838652803860892532937368410132774318637583096580727828898247962532586083840994053427771160669020020870242071247416029689706422786315482901021175850811637012850273886262020691609229864530016127170474522053923142946260440376107972016862727050456787403389015713389832609749494875641106790442262462731667589452689140375899693332603236677929505795530640014126187371192198789626167210132118537165017243889193731206451274568819672062099251154362092267248143497999117286353198217989194

# Recovered primes
primes = [
    101647775630465079430181933335771555799985576156528222181282125805375641080711,
    84329497326324187617092430866662205283085968979090912794664510121498038721251,
    70915577812812535613432498877350340815956300747436729152992593178060741103907,
    76523500526309927322867723647314009562819235804716965458489859992936476360501,
    61031945163910762048625438243633760904863718438107127743728880870129585483073,
    81228506085098020673605377540297595317298334728354953091530645832464361730969,
    77360703199573621630450824991012526832321257245518210752160255286602105258497,
    68050059583080110722998460544470968825163705600533416280137712787545978753239
]

# Step 1: reconstruct modulus
n = prod(primes)

# Step 2: compute totient
phi = prod([(p - 1) for p in primes])

# Step 3: compute private key
d = pow(e, -1, phi)

# Step 4: decrypt
m = pow(ct, d, n)

# Step 5: convert to string
flag = long_to_bytes(m).decode()

print("[+] FLAG:", flag)
